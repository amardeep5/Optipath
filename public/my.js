let maze = [
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
  // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0,0, 0,0, 0,0, 0,0, 0],
  // [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0,2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2,0, 2,0, 2,0, 2],
];


let T= Array(129)
    .fill()
    .map(() => Array(129).fill(0));



function turn (a,b){
    T[a][b]=0.5;
    T[b][a]=0.5;
}
turn(1,18);
turn(2,19);
turn(2,17);
turn(3,20);
turn(3,18);
turn(4,21);
turn(4,19);
turn(5,22);
turn(5,20);
turn(6,23);
turn(6,21);
turn(7,24);
turn(7,22);
turn(8,25);
turn(8,23);
turn(9,26);
turn(9,24);
turn(10,27);
turn(10,25);
turn(11,28);
turn(11,26);
turn(12,29);
turn(12,27);
turn(13,30);
turn(13,28);
turn(14,31);
turn(14,29);
turn(15,32);
turn(15,30);
turn(16,31);
turn(17,34);
turn(18,35);
turn(18,33);
turn(19,36);
turn(19,34);
turn(20,37);
turn(20,35);
turn(21,38);
turn(21,36);
turn(22,39);
turn(22,37);
turn(23,40);
turn(23,38);
turn(24,41);
turn(24,39);
turn(25,42);
turn(25,40);
turn(26,43);
turn(26,41);
turn(27,44);
turn(27,42);
turn(28,45);
turn(28,43);
turn(29,46);
turn(29,44);
turn(30,47);
turn(30,45);
turn(31,48);
turn(31,46);
turn(32,47);
turn(33,50);
turn(34,51);
turn(34,49);
turn(35,52);
turn(35,50);
turn(36,53);
turn(36,51);
turn(37,54);
turn(37,52);
turn(38,55);
turn(38,53);
turn(39,56);
turn(39,54);
turn(40,57);
turn(40,55);
turn(41,58);
turn(41,56);
turn(42,59);
turn(42,57);
turn(43,60);
turn(43,58);
turn(44,61);
turn(44,59);
turn(45,62);
turn(45,60);
turn(46,63);
turn(46,61);
turn(47,64);
turn(47,62);
turn(48,63);
turn(49,66);
turn(50,67);
turn(50,65);
turn(51,68);
turn(51,66);
turn(52,69);
turn(52,67);
turn(53,70);
turn(53,68);
turn(54,71);
turn(54,69);
turn(55,72);
turn(55,70);
turn(56,73);
turn(56,71);
turn(57,74);
turn(57,72);
turn(58,75);
turn(58,73);
turn(59,76);
turn(59,74);
turn(60,77);
turn(60,75);
turn(61,78);
turn(61,76);
turn(62,79);
turn(62,77);
turn(63,80);
turn(63,78);
turn(64,79);
turn(65,82);
turn(66,83);
turn(66,81);
turn(67,84);
turn(67,82);
turn(68,85);
turn(68,83);
turn(69,86);
turn(69,84);
turn(70,87);
turn(70,85);
turn(71,88);
turn(71,86);
turn(72,89);
turn(72,87);
turn(73,90);
turn(73,88);
turn(74,91);
turn(74,89);
turn(75,92);
turn(75,90);
turn(76,93);
turn(76,91);
turn(77,94);
turn(77,92);
turn(78,95);
turn(78,93);
turn(79,96);
turn(79,94);
turn(80,95);
turn(81,98);
turn(82,99);
turn(82,97);
turn(83,100);
turn(83,98);
turn(84,101);
turn(84,99);
turn(85,102);
turn(85,100);
turn(86,103);
turn(86,101);
turn(87,104);
turn(87,102);
turn(88,105);
turn(88,103);
turn(89,106);
turn(89,104);
turn(90,107);
turn(90,105);
turn(91,108);
turn(91,106);
turn(92,109);
turn(92,107);
turn(93,110);
turn(93,108);
turn(94,111);
turn(94,109);
turn(95,112);
turn(95,110);
turn(96,111);
turn(97,114);
turn(98,115);
turn(98,113);
turn(99,116);
turn(99,114);
turn(100,117);
turn(100,115);
turn(101,118);
turn(101,116);
turn(102,119);
turn(102,117);
turn(103,120);
turn(103,118);
turn(104,121);
turn(104,119);
turn(105,122);
turn(105,120);
turn(106,123);
turn(106,121);
turn(107,124);
turn(107,122);
turn(108,125);
turn(108,123);
turn(109,126);
turn(109,124);
turn(110,127);
turn(110,125);
turn(111,128);
turn(111,126);
turn(112,127);

// Array for weight matrix
let NW = Array(129)
  .fill()
  .map(() => Array(129).fill(10000));
//------------------
NW[1][2] = 100 / 1000;
NW[2][1] = 100 / 1000;
//-------------------
NW[2][3] = 210 / 1000;
NW[3][2] = 210 / 1000;
//-------------------
NW[3][4] = 105 / 1000;
NW[4][3] = 105 / 1000;
//-------------------
NW[4][5] = 120 / 1000;
NW[5][4] = 120 / 1000;
//-------------------
NW[5][6] = 140 / 1000;
NW[6][5] = 140 / 1000;

NW[7][6] = 440 / 1000;
NW[6][7] = 440 / 1000;
//-------------------
NW[7][8] = 101 / 1000;
NW[8][7] = 101 / 1000;
//-------------------
NW[8][9] = 107 / 1000;
NW[9][8] = 107 / 1000;
//-------------------
NW[9][10] = 108 / 1000;
NW[10][9] = 108 / 1000;
//-------------------
NW[10][11] = 150 / 1000;
NW[11][10] = 150 / 1000;
//-------------------
NW[11][12] = 190 / 1000;
NW[12][11] = 190 / 1000;

NW[12][13] = 290 / 1000;
NW[13][12] = 290 / 1000;
//-------------------
NW[13][14] = 600 / 1000;
NW[14][13] = 600 / 1000;
//-------------------
NW[14][15] = 500 / 1000;
NW[15][14] = 500 / 1000;
//-------------------
NW[15][16] = 1000 / 1000;
NW[16][15] = 1000 / 1000;
//-------------------

NW[17][18] = 130 / 1000;
NW[18][17] = 130 / 1000;
//-------------------
NW[19][18] = 930 / 1000;
NW[18][19] = 930 / 1000;
//-------------------
NW[19][20] = 170 / 1000;
NW[20][19] = 170 / 1000;
//-------------------
NW[20][21] = 800 / 1000;
NW[21][20] = 800 / 1000;
//-------------------
NW[21][22] = 120 / 1000;
NW[22][21] = 120 / 1000;
//-------------------
NW[22][23] = 300 / 1000;
NW[23][22] = 300 / 1000;
//-------------------
NW[23][24] = 400 / 1000;
NW[24][23] = 40 / 1000;
//-------------------
NW[25][26] = 505 / 1000;
NW[26][25] = 505 / 1000;
//-------------------
NW[26][27] = 600 / 1000;
NW[27][26] = 600 / 1000;
//-------------------
NW[27][28] = 270 / 1000;
NW[28][27] = 270 / 1000;
//-------------------
NW[28][29] = 170 / 1000;
NW[29][28] = 170 / 1000;
//-------------------
NW[29][30] = 180 / 1000;
NW[30][29] = 180 / 1000;
//-------------------
NW[31][30] = 480 / 1000;
NW[30][31] = 480 / 1000;

NW[31][32] = 104 / 1000;
NW[32][31] = 104 / 1000;
//-------------------

NW[33][34] = 158 / 1000;
NW[34][33] = 158 / 1000;
//-------------------
NW[34][35] = 140 / 1000;
NW[35][34] = 140 / 1000;
//-------------------
NW[35][36] = 121 / 1000;
NW[36][35] = 121 / 1000;
//-------------------
NW[37][36] = 191 / 1000;
NW[36][37] = 191 / 1000;

NW[37][38] = 111 / 1000;
NW[38][37] = 111 / 1000;
//-------------------
NW[38][39] = 106 / 1000;
NW[39][38] = 106 / 1000;
//-------------------
NW[39][40] = 182 / 1000;
NW[40][39] = 182 / 1000;
NW[41][40] = 182 / 1000;
NW[40][41] = 182 / 1000;
//-------------------
NW[41][42] = 193 / 1000;
NW[42][41] = 193 / 1000;
NW[43][42] = 365 / 1000;
NW[42][43] = 365 / 1000;
//-------------------
NW[43][44] = 900 / 1000;
NW[44][43] = 900 / 1000;
//-------------------
NW[44][45] = 300 / 1000;
NW[45][44] = 300 / 1000;
//-------------------
NW[45][46] = 800 / 1000;
NW[46][45] = 800 / 1000;
//-------------------
NW[46][47] = 900 / 1000;
NW[47][46] = 900 / 1000;
//-------------------
NW[47][48] = 1000 / 1000;
NW[48][47] = 1000 / 1000;
//-------------------
NW[49][50] = 904 / 1000;
NW[50][49] = 904 / 1000;
//-------------------

NW[50][51] = 103 / 1000;
NW[51][50] = 103 / 1000;
//-------------------
NW[51][52] = 504 / 1000;
NW[52][51] = 504 / 1000;
//-------------------
NW[52][53] = 560 / 1000;
NW[53][52] = 560 / 1000;
//-------------------
NW[53][54] = 130 / 1000;
NW[54][53] = 130 / 1000;
//-------------------
//start
NW[55][54] = 120 / 1000;
NW[54][55] = 120 / 1000;
//-------------------
NW[55][56] = 130 / 1000;
NW[56][55] = 130 / 1000;
//-------------------
NW[57][56] = 140 / 1000;
NW[56][57] = 140 / 1000;
//-------------------
NW[58][57] = 430 / 1000;
NW[57][58] = 430 / 1000;
//-------------------
NW[58][59] = 330 / 1000;
NW[59][58] = 330 / 1000;
//-------------------
NW[59][60] = 630 / 1000;
NW[60][59] = 630 / 1000;
//-------------------
NW[61][60] = 930 / 1000;
NW[60][61] = 930 / 1000;
//-------------------
NW[62][61] = 430 / 1000;
NW[61][62] = 430 / 1000;
//-------------------
NW[63][62] = 430 / 1000;
NW[62][63] = 430 / 1000;
//-------------------
NW[64][63] = 930 / 1000;
NW[63][64] = 930 / 1000;
//-------------------
NW[65][66] = 190 / 1000;
NW[66][65] = 190 / 1000;
//-------------------
NW[66][67] = 1000 / 1000;
NW[67][66] = 1000 / 1000;
//-------------------
NW[67][68] = 140 / 1000;
NW[68][67] = 140 / 1000;
//-------------------
NW[68][69] = 160 / 1000;
NW[69][68] = 160 / 1000;
//-------------------

NW[70][69] = 360 / 1000;
NW[69][70]= 360 / 1000;



NW[70][71] = 430 / 1000;
NW[71][70] = 430 / 1000;
//-------------------
NW[72][71] = 456 / 1000;
NW[71][72] = 456 / 1000;
//-------------------
NW[72][73] = 345 / 1000;
NW[73][72] = 345 / 1000;
//-------------------
NW[73][74] = 420 / 1000;
NW[74][73] = 420 / 1000;
//-------------------
NW[74][75] = 345 / 1000;
NW[75][74] = 345 / 1000;
//-------------------
NW[75][76] = 130 / 1000;
NW[76][75] = 130 / 1000;
//-------------------
NW[76][77] = 456 / 1000;
NW[77][76] = 456 / 1000;
//-------------------
NW[77][78] = 789 / 1000;
NW[78][77] = 789 / 1000;
//-------------------
NW[78][79] = 130 / 1000;
NW[79][78] = 130 / 1000;
//-------------------
NW[79][80] = 890 / 1000;
NW[80][79] = 890 / 1000;
//-------------------
NW[81][82] = 760 / 1000;
NW[82][81] = 760 / 1000;
//-------------------
NW[82][83] = 340 / 1000;
NW[83][82] = 340 / 1000;
//-------------------
NW[83][84] = 930 / 1000;
NW[84][83] = 930 / 1000;
//-------------------
NW[84][85] = 530 / 1000;
NW[85][84] = 530 / 1000;
//-------------------
NW[85][86] = 630 / 1000;
NW[86][85] = 630 / 1000;
//-------------------
NW[86][87] = 830 / 1000;
NW[87][86] = 830 / 1000;
//-------------------
NW[87][88] = 560 / 1000;
NW[88][87] = 560 / 1000;
//-------------------
NW[88][89] = 930 / 1000;
NW[89][88] = 930 / 1000;
//-------------------
NW[89][90] = 670 / 1000;
NW[90][89] = 670 / 1000;
//-------------------
NW[90][91] = 340 / 1000;
NW[91][90] = 340 / 1000;
//-------------------
NW[91][92] = 560 / 1000;
NW[92][91] = 560 / 1000;
//-------------------
NW[92][93] = 130 / 1000;
NW[93][92] = 130 / 1000;
//-------------------
NW[93][94] = 630 / 1000;
NW[94][93] = 630 / 1000;
//-------------------
NW[94][95] = 830 / 1000;
NW[95][94] = 830 / 1000;
//-------------------
NW[95][96] = 430 / 1000;
NW[96][95] = 430 / 1000;
//-------------------
NW[97][96] = 630 / 1000;
NW[96][97] = 630 / 1000;
//-------------------
NW[97][98] = 330 / 1000;
NW[98][97] = 330 / 1000;
//-------------------
NW[98][99] = 430 / 1000;
NW[99][98] = 430 / 1000;
//-------------------
NW[100][99] = 930 / 1000;
NW[99][100] = 930 / 1000;
//-------------------
NW[100][101] = 630 / 1000;
NW[101][100] = 630 / 1000;
//-------------------
NW[101][102] = 678 / 1000;
NW[102][101] = 678 / 1000;
//-------------------
NW[102][103] = 567 / 1000;
NW[103][102] = 567 / 1000;
//-------------------
NW[103][104] = 130 / 1000;
NW[104][103] = 130 / 1000;
//-------------------
NW[104][105] = 130 / 1000;
NW[105][104] = 130 / 1000;
//-------------------
NW[105][106] = 240 / 1000;
NW[106][105] = 240 / 1000;
//-------------------
NW[106][107] = 480 / 1000;
NW[107][106] = 480 / 1000;
//-------------------
NW[108][107] = 130 / 1000;
NW[107][108] = 130 / 1000;
//-------------------
NW[108][109] = 630 / 1000;
NW[109][108] = 630 / 1000;
//-------------------
NW[109][110] = 830 / 1000;
NW[110][109] = 830 / 1000;
//-------------------
NW[110][111] = 530 / 1000;
NW[111][110] = 530 / 1000;
//-------------------
NW[112][111] = 1000 / 1000;
NW[111][112] = 1000 / 1000;
//-------------------


//verti
//-------------------
NW[1][17] = 190 / 1000;
NW[17][1] = 190/ 1000;
//-------------------
NW[17][33] = 870 / 1000;
NW[33][17] = 870 / 1000;
//-------------------
NW[33][49] = 710 / 1000;
NW[49][33] = 710 / 1000;
//-------------------

NW[49][65] = 190 / 1000;
NW[65][49] = 190 / 1000;
//-------------------
NW[65][81] = 170 / 1000;
NW[81][65] = 170 / 1000;
//-------------------
NW[81][97] = 130 / 1000;
NW[97][81] = 130 / 1000;
//-------------------

NW[2][18] = 120 / 1000;
NW[18][2] = 120 / 1000;
//-------------------
NW[18][34] = 150 / 1000;
NW[34][18] = 150 / 1000;
//-------------------
NW[34][50] = 160 / 1000;
NW[50][34] = 160 / 1000;
//-------------------
NW[50][66] = 190 / 1000;
NW[66][50] = 19 / 1000;
//-------------------

NW[66][82] = 150 / 1000;
NW[82][66] = 150 / 1000;
//-------------------
NW[82][98] = 130 / 1000;
NW[98][82] = 130 / 1000;
//-------------------
NW[3][19] = 150 / 1000;
NW[19][3] = 150 / 1000;
//-------------------

NW[19][35] = 500 / 1000;
NW[35][19] = 500 / 1000;
//-------------------
NW[35][51] = 600 / 1000;
NW[51][35] = 600 / 1000;
//-------------------
NW[51][67] = 700 / 1000;
NW[67][51] = 700 / 1000;
//-------------------
NW[67][83] = 800 / 1000;
NW[83][67] = 800 / 1000;
//-------------------
NW[83][99] = 900 / 1000;
NW[99][83] = 900 / 1000;
//-------------------
NW[4][20] = 500 / 1000;
NW[20][4] = 500 / 1000;
//-------------------
NW[20][36] = 170 / 1000;
NW[36][20] = 170 / 1000;
//-------------------
NW[36][52] = 180 / 1000;
NW[52][36] = 180 / 1000;
//-------------------
NW[52][68] = 110 / 1000;
NW[68][52] = 110 / 1000;
//-------------------
NW[68][84] = 160 / 1000;
NW[84][68] = 160 / 1000;
//-------------------
NW[84][100] = 170 / 1000;
NW[100][84] = 170 / 1000;
//-------------------
NW[5][21] = 80 / 1000;
NW[21][5] = 80 / 1000;
//-------------------
NW[21][37] = 90 / 1000;
NW[37][21] = 90 / 1000;
//-------------------
NW[37][53] = 70 / 1000;
NW[53][37] = 70 / 1000;
//-------------------
NW[53][69] = 700 / 1000;
NW[69][53] = 700 / 1000;
//-------------------
NW[69][85] = 50 / 1000;
NW[85][69] = 50 / 1000;
//-------------------
NW[85][101] = 300 / 1000;
NW[101][85] = 300 / 1000;
//-------------------
NW[6][22] = 200 / 1000;
NW[22][6] = 200 / 1000;
//-------------------
NW[22][38] = 90 / 1000;
NW[38][22] = 90 / 1000;
//-------------------
NW[38][54] = 300 / 1000;
NW[54][38] = 300 / 1000;
//-------------------
NW[54][70] = 570 / 1000;
NW[70][54] = 570 / 1000;
//-------------------
NW[70][86] = 460 / 1000;
NW[86][70] = 460 / 1000;
//-------------------
NW[86][102] = 890 / 1000;
NW[102][86] = 890 / 1000;
//-------------------
NW[7][23] = 570 / 1000;
NW[23][7] = 570 / 1000;
//-------------------
NW[23][39] = 340 / 1000;
NW[39][23] = 340 / 1000;
//-------------------
NW[39][55] = 230 / 1000;
NW[55][39] = 230 / 1000;
//-------------------
NW[55][71] = 780 / 1000;
NW[71][55] = 780 / 1000;
//-------------------
NW[71][87] = 1000 / 1000;
NW[87][71] = 1000 / 1000;
//-------------------
NW[87][103] = 560 / 1000;
NW[103][87] = 560 / 1000;
//-------------------
NW[8][24] = 230 / 1000;
NW[24][8] = 230 / 1000;
//-------------------
NW[24][40] = 780 / 1000;
NW[40][24] = 780 / 1000;
//-------------------
NW[40][56] = 340 / 1000;
NW[56][40] = 340 / 1000;
//-------------------
NW[56][72] = 120 / 1000;
NW[72][56] = 120 / 1000;
//-------------------
NW[72][88] = 370 / 1000;
NW[88][72] = 370 / 1000;
//-------------------
NW[88][104] = 490 / 1000;
NW[104][88] = 490 / 1000;

//-------------------
NW[9][25] = 500 / 1000;
NW[25][9] = 500 / 1000;

//-------------------
NW[25][41] = 230 / 1000;
NW[41][25] = 230 / 1000;

//-------------------
NW[41][57] = 490 / 1000;
NW[57][41] = 490 / 1000;

//-------------------
NW[57][73] = 450 / 1000;
NW[73][57] = 450 / 1000;

//-------------------
NW[73][89] = 360 / 1000;
NW[89][73] = 360 / 1000;

//-------------------
NW[89][105] = 890 / 1000;
NW[105][89] = 890 / 1000;

//-------------------
NW[10][26] = 890 / 1000;
NW[26][10] = 890 / 1000;

//-------------------
NW[26][42] = 690 / 1000;
NW[42][26] = 690 / 1000;

//-------------------
NW[42][58] = 490 / 1000;
NW[58][42] = 490 / 1000;

//-------------------
NW[58][74] = 290 / 1000;
NW[74][58] = 290 / 1000;

//-------------------
NW[74][90] = 190 / 1000;
NW[90][74] = 190 / 1000;

//-------------------
NW[90][106] = 840 / 1000;
NW[106][90] = 840 / 1000;

//-------------------
NW[11][27] = 990 / 1000;
NW[27][11] = 990 / 1000;

//-------------------
NW[27][43] = 250 / 1000;
NW[43][27] = 250 / 1000;

//-------------------
NW[43][59] = 500 / 1000;
NW[59][43] = 500 / 1000;

//-------------------
NW[59][75] = 760 / 1000;
NW[75][59] = 760 / 1000;

//-------------------
NW[75][91] = 890 / 1000;
NW[91][75] = 890 / 1000;

//-------------------
NW[91][107] = 390 / 1000;
NW[107][91] = 390 / 1000;

//-------------------
NW[12][28] = 290 / 1000;
NW[28][12] = 290 / 1000;

//-------------------
NW[28][44] = 790 / 1000;
NW[44][28] = 790 / 1000;

//-------------------
NW[44][60] = 670 / 1000;
NW[60][44] = 670 / 1000;

//-------------------
NW[60][76] = 690 / 1000;
NW[76][60] = 690 / 1000;

//-------------------
NW[76][92] = 450 / 1000;
NW[92][76] = 450 / 1000;

//-------------------
NW[92][108] = 290 / 1000;
NW[108][92] = 290 / 1000;

//-------------------
NW[13][29] = 160 / 1000;
NW[29][13] = 160 / 1000;

//-------------------
NW[29][45] = 240 / 1000;
NW[45][29] = 240 / 1000;

//-------------------
NW[45][61] = 320 / 1000;
NW[61][45] = 320 / 1000;

//-------------------
NW[61][77] = 400 / 1000;
NW[77][61] = 400 / 1000;

//-------------------
NW[77][93] = 870 / 1000;
NW[93][77] = 870 / 1000;

//-------------------
NW[93][109] = 560 / 1000;
NW[109][93] = 560 / 1000;

//-------------------
NW[14][30] = 490 / 1000;
NW[30][14] = 490 / 1000;

//-------------------
NW[30][46] = 300 / 1000;
NW[46][30] = 300 / 1000;

//-------------------
NW[46][62] = 400 / 1000;
NW[62][46] = 400 / 1000;

//-------------------
NW[62][78] = 700 / 1000;
NW[78][62] = 700 / 1000;

//-------------------
NW[78][94] = 350 / 1000;
NW[94][78] = 350 / 1000;

//-------------------
NW[94][110] = 450 / 1000;
NW[110][94] = 450 / 1000;

//-------------------
NW[15][31] = 670 / 1000;
NW[31][15] = 670 / 1000;

//-------------------
NW[31][47] = 690 / 1000;
NW[47][31] = 690 / 1000;

//-------------------
NW[47][63] = 345 / 1000;
NW[63][47] = 345 / 1000;

//-------------------
NW[63][79] = 670 / 1000;
NW[79][63] = 670 / 1000;

//-------------------
NW[79][95] = 345 / 1000;
NW[95][79] = 345 / 1000;

//-------------------
NW[95][111] = 455 / 1000;
NW[111][95] = 455 / 1000;

//-------------------
NW[16][32] = 456 / 1000;
NW[32][16] = 456 / 1000;

//-------------------
NW[32][48] = 320 / 1000;
NW[48][32] = 320 / 1000;

//-------------------
NW[48][64] = 600 / 1000;
NW[64][48] = 600 / 1000;

//-------------------
NW[64][80] = 490 / 1000;
NW[80][64] = 490 / 1000;

//-------------------
NW[80][96] = 890 / 1000;
NW[96][80] = 890 / 1000;

//-------------------
NW[96][112] = 890 / 1000;
NW[112][96] = 890 / 1000;






let NW1 = Array(129)
  .fill()
  .map(() => Array(129).fill(10000));
//------------------
NW1[1][2] = 100 / 1000;
NW1[2][1] = 100 / 1000;
//-------------------
NW1[2][3] = 210 / 1000;
NW1[3][2] = 210 / 1000;
//-------------------
NW1[3][4] = 105 / 1000;
NW1[4][3] = 105 / 1000;
//-------------------
NW1[4][5] = 120 / 1000;
NW1[5][4] = 120 / 1000;
//-------------------
NW1[5][6] = 140 / 1000;
NW1[6][5] = 140 / 1000;

NW1[7][6] = 440 / 1000;
NW1[6][7] = 440 / 1000;
//-------------------
NW1[7][8] = 101 / 1000;
NW1[8][7] = 101 / 1000;
//-------------------
NW1[8][9] = 107 / 1000;
NW1[9][8] = 107 / 1000;
//-------------------
NW1[9][10] = 108 / 1000;
NW1[10][9] = 108 / 1000;
//-------------------
NW1[10][11] = 150 / 1000;
NW1[11][10] = 150 / 1000;
//-------------------
NW1[11][12] = 190 / 1000;
NW1[12][11] = 190 / 1000;

NW1[12][13] = 290 / 1000;
NW1[13][12] = 290 / 1000;
//-------------------
NW1[13][14] = 600 / 1000;
NW1[14][13] = 600 / 1000;
//-------------------
NW1[14][15] = 500 / 1000;
NW1[15][14] = 500 / 1000;
//-------------------
NW1[15][16] = 1000 / 1000;
NW1[16][15] = 1000 / 1000;
//-------------------

NW1[17][18] = 130 / 1000;
NW1[18][17] = 130 / 1000;
//-------------------
NW1[19][18] = 930 / 1000;
NW1[18][19] = 930 / 1000;
//-------------------
NW1[19][20] = 170 / 1000;
NW1[20][19] = 170 / 1000;
//-------------------
NW1[20][21] = 800 / 1000;
NW1[21][20] = 800 / 1000;
//-------------------
NW1[21][22] = 120 / 1000;
NW1[22][21] = 120 / 1000;
//-------------------
NW1[22][23] = 300 / 1000;
NW1[23][22] = 300 / 1000;
//-------------------
NW1[23][24] = 400 / 1000;
NW1[24][23] = 40 / 1000;
//-------------------
NW1[25][26] = 505 / 1000;
NW1[26][25] = 505 / 1000;
//-------------------
NW1[26][27] = 600 / 1000;
NW1[27][26] = 600 / 1000;
//-------------------
NW1[27][28] = 270 / 1000;
NW1[28][27] = 270 / 1000;
//-------------------
NW1[29][28] = 170 / 1000;
NW1[28][29] = 170 / 1000;
//-------------------
NW1[29][30] = 180 / 1000;
NW1[30][29] = 180 / 1000;
//-------------------
NW1[31][30] = 480 / 1000;
NW1[30][31] = 480 / 1000;

NW1[31][32] = 104 / 1000;
NW1[32][31] = 104 / 1000;
//-------------------

NW1[33][34] = 158 / 1000;
NW1[34][33] = 158 / 1000;
//-------------------
NW1[34][35] = 140 / 1000;
NW1[35][34] = 140 / 1000;
//-------------------
NW1[35][36] = 121 / 1000;
NW1[36][35] = 121 / 1000;
//-------------------
NW1[37][36] = 191 / 1000;
NW1[36][37] = 191 / 1000;

NW1[37][38] = 111 / 1000;
NW1[38][37] = 111 / 1000;
//-------------------
NW1[38][39] = 106 / 1000;
NW1[39][38] = 106 / 1000;
//-------------------
NW1[39][40] = 182 / 1000;
NW1[40][39] = 182 / 1000;


NW1[40][41] = 182 / 1000;
NW1[41][40] = 182 / 1000;
//-------------------
NW1[41][42] = 193 / 1000;
NW1[42][41] = 193 / 1000;
NW1[43][42] = 365 / 1000;
NW1[42][43] = 365 / 1000;
//-------------------
NW1[43][44] = 900 / 1000;
NW1[44][43] = 900 / 1000;
//-------------------
NW1[44][45] = 300 / 1000;
NW1[45][44] = 300 / 1000;
//-------------------
NW1[45][46] = 800 / 1000;
NW1[46][45] = 800 / 1000;
//-------------------
NW1[46][47] = 900 / 1000;
NW1[47][46] = 900 / 1000;
//-------------------
NW1[47][48] = 1000 / 1000;
NW1[48][47] = 1000 / 1000;
//-------------------
NW1[49][50] = 904 / 1000;
NW1[50][49] = 904 / 1000;
//-------------------

NW1[50][51] = 103 / 1000;
NW1[51][50] = 103 / 1000;
//-------------------
NW1[51][52] = 504 / 1000;
NW1[52][51] = 504 / 1000;
//-------------------
NW1[52][53] = 560 / 1000;
NW1[53][52] = 560 / 1000;
//-------------------
NW1[53][54] = 130 / 1000;
NW1[54][53] = 130 / 1000;
//-------------------
//start
NW1[55][54] = 120 / 1000;
NW1[54][55] = 120 / 1000;
//-------------------
NW1[55][56] = 130 / 1000;
NW1[56][55] = 130 / 1000;
//-------------------
NW1[57][56] = 140 / 1000;
NW1[56][57] = 140 / 1000;
//-------------------
NW1[58][57] = 430 / 1000;
NW1[57][58] = 430 / 1000;
//-------------------
NW1[58][59] = 330 / 1000;
NW1[59][58] = 330 / 1000;
//-------------------
NW1[59][60] = 630 / 1000;
NW1[60][59] = 630 / 1000;
//-------------------
NW1[61][60] = 930 / 1000;
NW1[60][61] = 930 / 1000;
//-------------------
NW1[62][61] = 430 / 1000;
NW1[61][62] = 430 / 1000;
//-------------------
NW1[63][62] = 430 / 1000;
NW1[62][63] = 430 / 1000;
//-------------------
NW1[64][63] = 930 / 1000;
NW1[63][64] = 930 / 1000;
//-------------------
NW1[65][66] = 190 / 1000;
NW1[66][65] = 190 / 1000;
//-------------------
NW1[66][67] = 1000 / 1000;
NW1[67][66] = 1000 / 1000;
//-------------------
NW1[67][68] = 140 / 1000;
NW1[68][67] = 140 / 1000;
//-------------------
NW1[68][69] = 160 / 1000;
NW1[69][68] = 160 / 1000;
//-------------------

NW1[70][69] = 360 / 1000;
NW1[69][70]= 360 / 1000;



NW1[70][71] = 430 / 1000;
NW1[71][70] = 430 / 1000;
//-------------------
NW1[72][71] = 456 / 1000;
NW1[71][72] = 456 / 1000;
//-------------------
NW1[72][73] = 345 / 1000;
NW1[73][72] = 345 / 1000;
//-------------------
NW1[73][74] = 420 / 1000;
NW1[74][73] = 420 / 1000;
//-------------------
NW1[74][75] = 345 / 1000;
NW1[75][74] = 345 / 1000;
//-------------------
NW1[75][76] = 130 / 1000;
NW1[76][75] = 130 / 1000;
//-------------------
NW1[76][77] = 456 / 1000;
NW1[77][76] = 456 / 1000;
//-------------------
NW1[77][78] = 789 / 1000;
NW1[78][77] = 789 / 1000;
//-------------------
NW1[78][79] = 130 / 1000;
NW1[79][78] = 130 / 1000;
//-------------------
NW1[79][80] = 890 / 1000;
NW1[80][79] = 890 / 1000;
//-------------------
NW1[81][82] = 760 / 1000;
NW1[82][81] = 760 / 1000;
//-------------------
NW1[82][83] = 340 / 1000;
NW1[83][82] = 340 / 1000;
//-------------------
NW1[83][84] = 930 / 1000;
NW1[84][83] = 930 / 1000;
//-------------------
NW1[84][85] = 530 / 1000;
NW1[85][84] = 530 / 1000;
//-------------------
NW1[85][86] = 630 / 1000;
NW1[86][85] = 630 / 1000;
//-------------------
NW1[86][87] = 830 / 1000;
NW1[87][86] = 830 / 1000;
//-------------------
NW1[87][88] = 560 / 1000;
NW1[88][87] = 560 / 1000;
//-------------------
NW1[88][89] = 930 / 1000;
NW1[89][88] = 930 / 1000;
//-------------------
NW1[89][90] = 670 / 1000;
NW1[90][89] = 670 / 1000;
//-------------------
NW1[90][91] = 340 / 1000;
NW1[91][90] = 340 / 1000;
//-------------------
NW1[91][92] = 560 / 1000;
NW1[92][91] = 560 / 1000;
//-------------------
NW1[92][93] = 130 / 1000;
NW1[93][92] = 130 / 1000;
//-------------------
NW1[93][94] = 630 / 1000;
NW1[94][93] = 630 / 1000;
//-------------------
NW1[94][95] = 830 / 1000;
NW1[95][94] = 830 / 1000;
//-------------------
NW1[95][96] = 430 / 1000;
NW1[96][95] = 430 / 1000;
//-------------------
NW1[97][96] = 630 / 1000;
NW1[96][97] = 630 / 1000;
//-------------------
NW1[97][98] = 330 / 1000;
NW1[98][97] = 330 / 1000;
//-------------------
NW1[98][99] = 430 / 1000;
NW1[99][98] = 430 / 1000;
//-------------------
NW1[100][99] = 930 / 1000;
NW1[99][100] = 930 / 1000;
//-------------------
NW1[100][101] = 630 / 1000;
NW1[101][100] = 630 / 1000;
//-------------------
NW1[101][102] = 678 / 1000;
NW1[102][101] = 678 / 1000;
//-------------------
NW1[102][103] = 567 / 1000;
NW1[103][102] = 567 / 1000;
//-------------------
NW1[103][104] = 130 / 1000;
NW1[104][103] = 130 / 1000;
//-------------------
NW1[104][105] = 130 / 1000;
NW1[105][104] = 130 / 1000;
//-------------------
NW1[105][106] = 240 / 1000;
NW1[106][105] = 240 / 1000;
//-------------------
NW1[106][107] = 480 / 1000;
NW1[107][106] = 480 / 1000;
//-------------------
NW1[108][107] = 130 / 1000;
NW1[107][108] = 130 / 1000;
//-------------------
NW1[108][109] = 630 / 1000;
NW1[109][108] = 630 / 1000;
//-------------------
NW1[109][110] = 830 / 1000;
NW1[110][109] = 830 / 1000;
//-------------------
NW1[110][111] = 530 / 1000;
NW1[111][110] = 530 / 1000;
//-------------------
NW1[112][111] = 1000 / 1000;
NW1[111][112] = 1000 / 1000;
//-------------------


//verti
//-------------------
NW1[1][17] = 190 / 1000;
NW1[17][1] = 190/ 1000;
//-------------------
NW1[17][33] = 870 / 1000;
NW1[33][17] = 870 / 1000;
//-------------------
NW1[33][49] = 710 / 1000;
NW1[49][33] = 710 / 1000;
//-------------------

NW1[49][65] = 190 / 1000;
NW1[65][49] = 190 / 1000;
//-------------------
NW1[65][81] = 170 / 1000;
NW1[81][65] = 170 / 1000;
//-------------------
NW1[81][97] = 130 / 1000;
NW1[97][81] = 130 / 1000;
//-------------------

NW1[2][18] = 120 / 1000;
NW1[18][2] = 120 / 1000;
//-------------------
NW1[18][34] = 150 / 1000;
NW1[34][18] = 150 / 1000;
//-------------------
NW1[34][50] = 160 / 1000;
NW1[50][34] = 160 / 1000;
//-------------------
NW1[50][66] = 190 / 1000;
NW1[66][50] = 19 / 1000;
//-------------------

NW1[66][82] = 150 / 1000;
NW1[82][66] = 150 / 1000;
//-------------------
NW1[82][98] = 130 / 1000;
NW1[98][82] = 130 / 1000;
//-------------------
NW1[3][19] = 150 / 1000;
NW1[19][3] = 150 / 1000;
//-------------------

NW1[19][35] = 500 / 1000;
NW1[35][19] = 500 / 1000;
//-------------------
NW1[35][51] = 600 / 1000;
NW1[51][35] = 600 / 1000;
//-------------------
NW1[51][67] = 700 / 1000;
NW1[67][51] = 700 / 1000;
//-------------------
NW1[67][83] = 800 / 1000;
NW1[83][67] = 800 / 1000;
//-------------------
NW1[83][99] = 900 / 1000;
NW1[99][83] = 900 / 1000;
//-------------------
NW1[4][20] = 500 / 1000;
NW1[20][4] = 500 / 1000;
//-------------------
NW1[20][36] = 170 / 1000;
NW1[36][20] = 170 / 1000;
//-------------------
NW1[36][52] = 180 / 1000;
NW1[52][36] = 180 / 1000;
//-------------------
NW1[52][68] = 110 / 1000;
NW1[68][52] = 110 / 1000;
//-------------------
NW1[68][84] = 160 / 1000;
NW1[84][68] = 160 / 1000;
//-------------------
NW1[84][100] = 170 / 1000;
NW1[100][84] = 170 / 1000;
//-------------------
NW1[5][21] = 80 / 1000;
NW1[21][5] = 80 / 1000;
//-------------------
NW1[21][37] = 90 / 1000;
NW1[37][21] = 90 / 1000;
//-------------------
NW1[37][53] = 70 / 1000;
NW1[53][37] = 70 / 1000;
//-------------------
NW1[53][69] = 700 / 1000;
NW1[69][53] = 700 / 1000;
//-------------------
NW1[69][85] = 50 / 1000;
NW1[85][69] = 50 / 1000;
//-------------------
NW1[85][101] = 300 / 1000;
NW1[101][85] = 300 / 1000;
//-------------------
NW1[6][22] = 200 / 1000;
NW1[22][6] = 200 / 1000;
//-------------------
NW1[22][38] = 90 / 1000;
NW1[38][22] = 90 / 1000;
//-------------------
NW1[38][54] = 300 / 1000;
NW1[54][38] = 300 / 1000;
//-------------------
NW1[54][70] = 570 / 1000;
NW1[70][54] = 570 / 1000;
//-------------------
NW1[70][86] = 460 / 1000;
NW1[86][70] = 460 / 1000;
//-------------------
NW1[86][102] = 890 / 1000;
NW1[102][86] = 890 / 1000;
//-------------------
NW1[7][23] = 570 / 1000;
NW1[23][7] = 570 / 1000;
//-------------------
NW1[23][39] = 340 / 1000;
NW1[39][23] = 340 / 1000;
//-------------------
NW1[39][55] = 230 / 1000;
NW1[55][39] = 230 / 1000;
//-------------------
NW1[55][71] = 780 / 1000;
NW1[71][55] = 780 / 1000;
//-------------------
NW1[71][87] = 1000 / 1000;
NW1[87][71] = 1000 / 1000;
//-------------------
NW1[87][103] = 560 / 1000;
NW1[103][87] = 560 / 1000;
//-------------------
NW1[8][24] = 230 / 1000;
NW1[24][8] = 230 / 1000;
//-------------------
NW1[24][40] = 780 / 1000;
NW1[40][24] = 780 / 1000;
//-------------------
NW1[40][56] = 340 / 1000;
NW1[56][40] = 340 / 1000;
//-------------------
NW1[56][72] = 120 / 1000;
NW1[72][56] = 120 / 1000;
//-------------------
NW1[72][88] = 370 / 1000;
NW1[88][72] = 370 / 1000;
//-------------------
NW1[88][104] = 490 / 1000;
NW1[104][88] = 490 / 1000;

//-------------------
NW1[9][25] = 500 / 1000;
NW1[25][9] = 500 / 1000;

//-------------------
NW1[25][41] = 230 / 1000;
NW1[41][25] = 230 / 1000;

//-------------------
NW1[41][57] = 490 / 1000;
NW1[57][41] = 490 / 1000;

//-------------------
NW1[57][73] = 450 / 1000;
NW1[73][57] = 450 / 1000;

//-------------------
NW1[73][89] = 360 / 1000;
NW1[89][73] = 360 / 1000;

//-------------------
NW1[89][105] = 890 / 1000;
NW1[105][89] = 890 / 1000;

//-------------------
NW1[10][26] = 890 / 1000;
NW1[26][10] = 890 / 1000;

//-------------------
NW1[26][42] = 690 / 1000;
NW1[42][26] = 690 / 1000;

//-------------------
NW1[42][58] = 490 / 1000;
NW1[58][42] = 490 / 1000;

//-------------------
NW1[58][74] = 290 / 1000;
NW1[74][58] = 290 / 1000;

//-------------------
NW1[74][90] = 190 / 1000;
NW1[90][74] = 190 / 1000;

//-------------------
NW1[90][106] = 840 / 1000;
NW1[106][90] = 840 / 1000;

//-------------------
NW1[11][27] = 990 / 1000;
NW1[27][11] = 990 / 1000;

//-------------------
NW1[27][43] = 250 / 1000;
NW1[43][27] = 250 / 1000;

//-------------------
NW1[43][59] = 500 / 1000;
NW1[59][43] = 500 / 1000;

//-------------------
NW1[59][75] = 760 / 1000;
NW1[75][59] = 760 / 1000;

//-------------------
NW1[75][91] = 890 / 1000;
NW1[91][75] = 890 / 1000;

//-------------------
NW1[91][107] = 390 / 1000;
NW1[107][91] = 390 / 1000;

//-------------------
NW1[12][28] = 290 / 1000;
NW1[28][12] = 290 / 1000;

//-------------------
NW1[28][44] = 790 / 1000;
NW1[44][28] = 790 / 1000;

//-------------------
NW1[44][60] = 670 / 1000;
NW1[60][44] = 670 / 1000;

//-------------------
NW1[60][76] = 690 / 1000;
NW1[76][60] = 690 / 1000;

//-------------------
NW1[76][92] = 450 / 1000;
NW1[92][76] = 450 / 1000;

//-------------------
NW1[92][108] = 290 / 1000;
NW1[108][92] = 290 / 1000;

//-------------------
NW1[13][29] = 160 / 1000;
NW1[29][13] = 160 / 1000;

//-------------------
NW1[29][45] = 240 / 1000;
NW1[45][29] = 240 / 1000;

//-------------------
NW1[45][61] = 320 / 1000;
NW1[61][45] = 320 / 1000;

//-------------------
NW1[61][77] = 400 / 1000;
NW1[77][61] = 400 / 1000;

//-------------------
NW1[77][93] = 870 / 1000;
NW1[93][77] = 870 / 1000;

//-------------------
NW1[93][109] = 560 / 1000;
NW1[109][93] = 560 / 1000;

//-------------------
NW1[14][30] = 490 / 1000;
NW1[30][14] = 490 / 1000;

//-------------------
NW1[30][46] = 300 / 1000;
NW1[46][30] = 300 / 1000;

//-------------------
NW1[46][62] = 400 / 1000;
NW1[62][46] = 400 / 1000;

//-------------------
NW1[62][78] = 700 / 1000;
NW1[78][62] = 700 / 1000;

//-------------------
NW1[78][94] = 350 / 1000;
NW1[94][78] = 350 / 1000;

//-------------------
NW1[94][110] = 450 / 1000;
NW1[110][94] = 450 / 1000;

//-------------------
NW1[15][31] = 670 / 1000;
NW1[31][15] = 670 / 1000;

//-------------------
NW1[31][47] = 690 / 1000;
NW1[47][31] = 690 / 1000;

//-------------------
NW1[47][63] = 345 / 1000;
NW1[63][47] = 345 / 1000;

//-------------------
NW1[63][79] = 670 / 1000;
NW1[79][63] = 670 / 1000;

//-------------------
NW1[79][95] = 345 / 1000;
NW1[95][79] = 345 / 1000;

//-------------------
NW1[95][111] = 455 / 1000;
NW1[111][95] = 455 / 1000;

//-------------------
NW1[16][32] = 456 / 1000;
NW1[32][16] = 456 / 1000;

//-------------------
NW1[32][48] = 320 / 1000;
NW1[48][32] = 320 / 1000;

//-------------------
NW1[48][64] = 600 / 1000;
NW1[64][48] = 600 / 1000;

//-------------------
NW1[64][80] = 490 / 1000;
NW1[80][64] = 490 / 1000;

//-------------------
NW1[80][96] = 890 / 1000;
NW1[96][80] = 890 / 1000;

//-------------------
NW1[96][112] = 890 / 1000;
NW1[112][96] = 890 / 1000;

//-------------------
//GRAPH

var G = new Array(113);
for (let i = 1; i < 113; i++) {
  G[i] = new Array();
}
G[1].push(2, 17);
G[2].push(1, 3, 18);
G[3].push(2, 4, 19);
G[4].push(3, 5, 20);
G[5].push(4, 6, 21);
G[6].push(5, 22 ,7);
G[7].push(6, 8, 23);
G[8].push(7, 24, 9);
G[9].push(8, 10, 25);
G[10].push(9, 11, 26);
G[11].push(10, 12, 27);
G[12].push(28, 11,13);
G[13].push(12,29, 14);
G[14].push(30, 13, 15);
G[15].push(14, 16, 31);
G[16].push(15, 32);
G[17].push(1, 18);
G[18].push(17, 2,34,19);
G[19].push(3, 35, 20,18);
G[20].push(19, 21, 4, 36);
G[21].push(20, 22, 5, 37);
G[22].push(21, 23, 6, 38);
G[23].push(22, 24, 7, 39);
G[24].push(8, 23, 40,25);
G[25].push(9, 26, 41,24);
G[26].push(25, 27, 10, 42);
G[27].push(26, 28, 11, 43);
G[28].push(27, 29, 12, 44);
G[29].push(28, 30, 13, 45);
G[30].push(29, 14, 31,46);
G[31].push(15, 47, 32, 30);
G[32].push(31, 16, 48);
G[33].push( 34, 17, 49);
G[34].push(33, 35, 18, 50);
G[35].push(34, 36, 19, 51);
G[36].push(35, 20, 52,37);
G[37].push(36, 53, 38,21);
G[38].push(37, 39, 22, 54);
G[39].push(38, 40, 23, 55);
G[40].push(39, 41, 24, 56);
G[41].push(40, 42, 25, 57);
G[42].push(41, 26, 58,43);
G[43].push(27, 59, 44,42);
G[44].push(43, 45, 28, 60);
G[45].push(44, 46, 29, 61);
G[46].push(45, 47, 30, 62);
G[47].push(46, 48, 31, 63);
G[48].push(47, 32, 64);
G[49].push(33, 65);
G[50].push(49, 34, 51,66);
G[51].push(50, 52, 35 , 67);
G[52].push(51, 53, 36 , 68);
G[53].push(52, 54, 37 , 69);
G[54].push(53, 38 , 55 , 70);
G[55].push(54,56,39,71);
G[56].push(55,57,40,72);
G[57].push(56,58,41,73);
G[58].push(57,59,42,74);
G[59].push(58,60,43,75);
G[60].push(59,61,44,76);
G[61].push(60,62,45,77);
G[62].push(61,63,46,78);
G[63].push(62,64,47,79);
G[64].push(63,48,80);
G[65].push(66,49,81);
G[66].push(65,67,50,82);
G[67].push(66,68, 51, 83);
G[68].push(67,69,52, 84);
G[69].push(68,70, 53, 85);
G[70].push(69,71, 54, 86);
G[71].push(70,72,55,87);
G[72].push(71,73,56,88)
G[73].push(72,74,57,89);
G[74].push(73,75, 58, 90);
G[75].push(74,76, 59, 91);
G[76].push(75,77, 60, 92);
G[77].push(76,78, 61, 93);
G[78].push(77,79,62, 94);
G[79].push(78,80,63, 95);
G[80].push(79,64, 96);
G[81].push(82,65, 97);
G[82].push(81,83,66,98);
G[83].push(82,84,67,99);
G[84].push(83,85,68,100);
G[85].push(84,86,69,101);
G[86].push(85,87,70,102);
G[87].push(86,88,71,103);
G[88].push(87,89, 72, 104);
G[89].push(88,90,73,105);
G[90].push(89,91,74,106);
G[91].push(90,92,75,107);
G[92].push(91,93,76,108);
G[93].push(92,94,77,109);
G[94].push(93,95,78,110);
G[95].push(94,96,79,111);
G[96].push(95,97,80,112);
G[97].push(98,81);
G[98].push(99,97,82);
G[99].push(100,98,83);
G[100].push(101,99,84);
G[101].push(102,100,85);
G[102].push(103,101,86);
G[103].push(104,102,87);
G[104].push(105,103,88);
G[105].push(106,104,89);
G[106].push(107,105,90);
G[107].push(108,106,91);
G[108].push(109,107,92);
G[109].push(110,108,93)
G[110].push(111,109,94);
G[111].push(112,110,95);
G[112].push(111,96);
let optidistance=document.getElementById("optidistance");
let dikdistance=document.getElementById("dikdistance");
let total=0;
let total_turns=0;
optidistance.style.display="none";
dikdistance.style.display="none";
let arr=Array();
let vari =0;
let O = Array(129)
  .fill()
  .map(() => Array(129).fill(0));
let num=0,x=-1,y=-1;
async function myfunction2(e){
  const ele=e.srcElement;
  ele.style.backgroundColor="black";
  let str=ele.id;
  let vars=str.split("_");
  O[parseInt(vars[0])][parseInt(vars[1])]=1;
  O[parseInt(vars[1])][parseInt(vars[0])]=1;
  if(vari==1){
    let vari2=0;
    let i=0;
    let currNode=x;
    while(currNode!=y){
      if(currNode==vars[0]){
        break;
      }
      i=i+1;
      vari2=i;
      currNode=arr[i];
    }
    console.log(currNode);
    i=i+1;
    total =total -NW[vars[0]][vars[1]];
    if(T[arr[vari2-1]][vars[1]]!=undefined){
      total_turns=total_turns-T[arr[vari2-1]][vars[1]];
      }
        optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
    while(currNode!=y){
    let P=Array();
    P.push(vars[0])
    currNode=vars[1];
    let previous=0;
    document.getElementById(vars[1]).style.backgroundColor = "#beffb6";
    await sleep(500);
    while(currNode!=y){
      i = i + 1;
      previous=arr[i-1];
      currNode = arr[i];
      P.push(arr[i]);
      let tie;
      if(currNode>previous){
        tie=previous+ "_" + currNode;
      }
      else{
        tie=currNode + "_" + previous;
      }
      total =total -NW[arr[i]][arr[i-1]];
      if(T[arr[i]][arr[i-2]]!=undefined){
        total_turns=total_turns-T[arr[i]][arr[i-2]];
      }
        optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
        document.getElementById(tie).style.backgroundColor="rgb(235, 235, 235)";
      await sleep(500);
        document.getElementById(arr[i]).style.backgroundColor = "#beffb6";
    }
    for(let t=0;t<P.length;t++){
      arr.pop(P[t]);
    }
    arr.pop(y);
    await sleep(500);
    document.getElementById(y).style.backgroundColor = "#beffb6";
    console.log("optipath chala");
    await ObstacleFreePath(vars[0], y);
    if(T[arr[vari2-1]][arr[vari2+1]]!=undefined){
      total_turns=total_turns+T[arr[vari2-1]][arr[vari2+1]];
    }
    optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
  }

  }

}
function myfunction(e){
  if(num==0){
    const ele=e.srcElement;
    x=ele.id;
  ele.style.backgroundColor="green";
  num++;
  }
  else if(num==1){
    const ele=e.srcElement;
  ele.style.backgroundColor="red";
  y=ele.id;
  num++;
  }
}
// maze styles based on maze matrix
let mazeBody = document.getElementById("maze-body");
mazeBody.style.width = (maze[0].length + 3) * 40+ 10 + "px";
let br = document.createElement("br");
let optiButton = document.getElementById("opti-button");
let dijkButton = document.getElementById("dijk-button");
let pathList = document.getElementById("paths-list");

let r = maze.length - 1; // max rows in maze
let c = maze[0].length - 1; // max columns in maze
let pathCount = 0; // valid paths counter
// Displaying maze on front-end based on the maze matrix earlier initialized
let count = 1;
let toper=1;
for (let i = 0; i < maze.length; ++i) {
  if(i%2 == 0){
    for (let j = 0; j < maze[0].length; ++j) {
      let newDiv = document.createElement("div");
      newDiv.className = "square";
      // if (maze[i][j] == 0) {
      //   newDiv.classList.add("vl");
      // }
      if (maze[i][j] == 2) {
        newDiv.classList.add("space");
        newDiv.innerHTML = `<div class="sub" id=${count} onclick=${myfunction} >${count}<img src="shop3.png" style="filter: invert(100%);"alt="Girl in a jacket" width="30" height="30"></div>`;
        newDiv.id = count;
        newDiv.onclick=myfunction;
        count++;
      }
      else{
        let tie=((count-1)+ "_" + count);
        newDiv.id=tie;
        newDiv.innerHTML=`<div class="suggester">${NW[count-1][count]*1000}</div>`;
        newDiv.onclick=myfunction2;
      }
      mazeBody.appendChild(newDiv);
    }
  }
  else{
    for (let j = 0; j <maze[0].length; ++j) {
      let newDiv = document.createElement("div");
      newDiv.className = "square";
      if(j%2==0){
        let tie=toper+ "_" +(toper+16);
        newDiv.id = tie;
        toper++;
        newDiv.innerHTML=`<div class="divider" >${NW[toper-1][toper+15]*1000}</div>`;
        newDiv.onclick=myfunction2;
      }
      mazeBody.appendChild(newDiv);
    }
  }
}



let optistart = async () => {
  vari=1;
  optiButton.disabled = true;
  optiButton.style.opacity = 0.7;
  console.log("Thhis is time");
  await ObstacleFreePath(x, y);
  optiButton.innerHTML = "Optipath's  Algorithm";
  optiButton.classList.remove("running-button");
  optiButton.disabled = true;
  optiButton.style.opacity = 0.7;
};

let dijstart = async () => {
  vari=1;
  dijkButton.disabled = true;
  dijkButton.style.opacity = 0.7;
  console.log("Thhis is time");
  await DIJKSTRA(x,y);
  dijkButton.innerHTML = "Dijkstra's  Algorithm";
  dijkButton.classList.remove("running-button");
  dijkButton.disabled = true;
  dijkButton.style.opacity = 0.7;
};


let n = 129;
let maximum = 10000;

let Find_Min = async (size, v, d) => {
  let mini = maximum;
  let ans = 1;
  for (let i = 0; i <= size; i++) {
    if (v[i] == 0) {
      if (mini > d[i]) {
        ans = i;
        mini = d[i];
      }
    }
  }
  return ans;
};

let OPTIPATH = async (s, r) => {
  let visited = Array(n);
  let d = Array(n);
  let parent = Array(n);

  for (let i = 0; i < n; i++) {
    visited[i] = 0;
    d[i] = maximum;
    parent[i] = -1;
  }
  let count = 0;
  d[s] = 0;
  while (count < n) {
    let u = await Find_Min(n, visited, d); //karna define
    visited[u] = 1;
    count = count + 1;
    // console.log(u);
    // console.log(G[u]);
    for (let i = 0; i < G[u].length; i++) {
      let v = G[u][i];
      if (d[v] > d[u] + NW[u][v] + (parent[u] != -1 ? T[parent[u]][v] : 0)) {
        d[v] = d[u] + NW[u][v] + (parent[u] != -1 ? T[parent[u]][v] : 0);
        parent[v] = u;
      }
    }
  }
  let pr = r;
  let P = Array();
  P.push(pr);
  while (pr != s) {
    pr = parent[pr];
    P.push(pr);
  }
  P.reverse();
  return P;
};

let ObstacleFreePath = async (s, r) => {
  let currnode = parseInt(s);
  let previous=0;
  
  let j = 0;
  optidistance.style.display="block";
  arr.push(s);
  console.log(s,r);
  optidistance.style.display="block";
  optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
  document.getElementById(s).style.backgroundColor = "rgb(38, 166, 154)";
  // document.getElementById(currnode).classList.add("found-path");
  await sleep(500);
  // document.getElementById(currnode).classList.remove("found-path");
  while (currnode != r) {
    let P = Array();
    P = await OPTIPATH(s, r);
    let i = 0;
    let tie;
    while (O[P[i]][P[i + 1]] == 0 && currnode != r) {
      //no obstacle
     
      i = i + 1;
      previous=P[i-1];
      currnode = P[i];
      arr.push(P[i]);
      if(currnode>previous){
        tie=previous+ "_" + currnode;
      }
      else{
        tie=currnode + "_" + previous;
      }
      j = j + 1;
      
      if(document.getElementById(tie).style.backgroundColor=="rgb(38, 166, 154)"){
        document.getElementById(tie).style.backgroundColor="rgb(235, 235, 235)";
      }
      else{
        document.getElementById(tie).style.backgroundColor="rgb(38, 166, 154)";
      }
      await sleep(500);
      if(document.getElementById(P[i]).style.backgroundColor === "rgb(38, 166, 154)"){
        total =total -NW[P[i]][P[i-1]];
        if(T[P[i]][P[i-2]]!=undefined){
          total_turns=total_turns-T[P[i]][P[i-2]];
        }

        optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
        arr.pop(P[i-1]);
        document.getElementById(P[i-1]).style.backgroundColor = "#beffb6";
      }
      else{
        console.log(T[P[i]][P[i-2]]);
        if(T[P[i]][P[i-2]]!=undefined){
        total_turns=total_turns+T[P[i]][P[i-2]];
        }
        total =total +NW[P[i]][P[i-1]];
        optidistance.innerHTML=`<div>Total Distance of Optipath:${parseInt(total*1000)}</div><div>Total number of turns: ${parseInt(total_turns*2)}</div>`;
        document.getElementById(P[i]).style.backgroundColor = "rgb(38, 166, 154)";
      }
     
    }
    if (currnode != r) {
      //obstacle,so reroute
      s = P[i];
      NW[P[i]][P[i + 1]] = maximum;
    }
  }

  
};



let DIK = async (s, r) => {
  let visited = Array(n);
  let d = Array(n);
  let parent = Array(n);

  for (let i = 0; i < n; i++) {
    visited[i] = 0;
    d[i] = maximum;
    parent[i] = -1;
  }
  let count = 0;
  d[s] = 0;
  while (count < n) {
    let u = await Find_Min(n, visited, d); //karna define
    visited[u] = 1;
    count = count + 1;
    // console.log(u);
    // console.log(G[u]);
    for (let i = 0; i < G[u].length; i++) {
      let v = G[u][i];
      if (d[v] > d[u] + NW1[u][v]  ) {
        d[v] = d[u] + NW1[u][v] ;
        parent[v] = u;
      }
    }
  }
  let pr = r;
  let P = Array();
  P.push(pr);
  while (pr != s) {
    pr = parent[pr];
    P.push(pr);
  }
  P.reverse();
  return P;
};

let DIJKSTRA = async (s, r) => {
  let currnode = parseInt(s);
  let arr=Array();
  let previous=0;
  let j = 0;
  let disi=0;
  let dis_turn=0;
  dikdistance.style.display="block";
  dikdistance.innerHTML=`<div>Total distance of Dijkstar:${parseInt(disi*1000)}</div><div>Total number of turns:${parseInt(dis_turn*2)}</div>`;
  document.getElementById(s).style.backgroundColor="#546e7a";
  // document.getElementById(currnode).classList.add("found-path");
  await sleep(500);
  // document.getElementById(currnode).classList.remove("found-path");
  
    let P = Array();
    P = await DIK(s, r);
    console.log(P);
    let i = 0;
    let tie;
    let t=0;
    while (currnode != r) {
     
      i = i + 1;
      previous=P[i-1];
      currnode = P[i];
      arr.push(P[i]);
      if(currnode>previous){
        tie=previous+ "_" + currnode;
      }
      else{
        tie=currnode + "_" + previous;
      }
      j = j + 1;
        document.getElementById(tie).style.backgroundColor="#546e7a";
      await sleep(500);
      disi=disi +NW1[P[i]][P[i-1]];
      if(T[P[i]][P[i-2]]!=undefined){
        dis_turn=dis_turn+T[P[i]][P[i-2]];
        }
      dikdistance.innerHTML=`<div>Total distance of Dijkstar:${parseInt(disi*1000)}</div><div>Total number of turns:${parseInt(dis_turn*2)}</div>`;
        document.getElementById(P[i]).style.backgroundColor="#546e7a";
     
    }
    
  
  
};

function sleep(ms) {
  // sleep function to have some delay in algorithm to visualize more effectively
  return new Promise((resolve) => setTimeout(resolve, ms));
}

let reset=()=>{
  window.location.reload();
}
// 
// 
// 
//
//
// 
// 
// distance show karna hai
// weigtht change karna hai
// restart button lagna hai 
// starting page or welcome page
// distance show
// dono div ko ek karna hai